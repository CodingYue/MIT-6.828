print '''
/* See COPYRIGHT for copyright information. */

#include <inc/mmu.h>
#include <inc/memlayout.h>
#include <inc/trap.h>



###################################################################
# exceptions/interrupts
###################################################################

/* TRAPHANDLER defines a globally-visible function for handling a trap.
 * It pushes a trap number onto the stack, then jumps to _alltraps.
 * Use TRAPHANDLER for traps where the CPU automatically pushes an error code.
 *
 * You shouldn't call a TRAPHANDLER function from C, but you may
 * need to _declare_ one in C (for instance, to get a function pointer
 * during IDT setup).  You can declare the function with
 *   void NAME();
 * where NAME is the argument passed to TRAPHANDLER.
 */
'''

print "/* generated by vectors.py - do not edit */\n\n"
print "/* handlers */"

for i in xrange(256):
  print ".globl trap_vector%d" % i
  print "trap_vector%d:" % i
  print " pushl $0;"
  print " pushl $%d;" % i
  print " jmp _alltraps\n"

print "\n/* trap vector table */"
print ".data\n"
print ".globl trap_vector"
print "trap_vector:"

for i in xrange(256):
  print " .long trap_vector%d" % i

print '''
_alltraps:
pushl %ds;
pushl %es;
pushal;
pushl $GD_KD;
pushl $GD_KD;
popl %ds
popl %es
pushl %esp
pushl $0
jmp trap
'''
